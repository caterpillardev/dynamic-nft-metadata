org: jpbogle
app: solana-nft-programs-generator
service: solana-nft-programs-generator
frameworkVersion: "2 || 3"

provider:
  name: aws
  runtime: nodejs14.x
  versionFunctions: false
  lambdaHashingVersion: "20201221"
  environment:
    MAINNET_PRIMARY: ${param:MAINNET_PRIMARY}
    MAINNET_SECONDARY: ${param:MAINNET_SECONDARY}
  http:
    cors: true
  apiGateway:
    binaryMediaTypes:
      - "*/*"

package:
  individually: true
  include:
    - ./idls/**
    - ./img-generator/fonts/**
    - ./img-generator/assets/**
  exclude:
    - "./node_modules"
    - "./package-lock.json"
    - "./yarn.lock"

functions:
  img-generator-base:
    environment:
      FONTCONFIG_FILE: /var/task/fonts/fonts.conf
    handler: img-generator/handler.generate
    timeout: 10
    events:
      - http:
          path: /img
          method: get
          contentHandling: CONVERT_TO_BINARY
          caching:
            enabled: true
            ttlInSeconds: 10
            perKeyInvalidation:
              requireAuthorization: false
            cacheKeyParameters:
              - name: request.querystring.name
              - name: request.querystring.uri
              - name: request.querystring.text
              - name: request.querystring.cluster
  img-generator:
    environment:
      FONTCONFIG_FILE: /var/task/fonts/fonts.conf
    handler: img-generator/handler.generate
    timeout: 10
    events:
      - http:
          path: /img/{mintId}
          method: get
          contentHandling: CONVERT_TO_BINARY
          caching:
            enabled: true
            ttlInSeconds: 10
            perKeyInvalidation:
              requireAuthorization: false
            cacheKeyParameters:
              - name: request.path.mintId
              - name: request.querystring.name
              - name: request.querystring.uri
              - name: request.querystring.text
              - name: request.querystring.cluster
  metadata-generator-base:
    handler: metadata-generator/handler.generate
    environment:
    timeout: 10
    events:
      - http:
          path: /metadata
          method: get
          caching:
            enabled: true
            ttlInSeconds: 10
            perKeyInvalidation:
              requireAuthorization: false
            cacheKeyParameters:
              - name: request.querystring.name
              - name: request.querystring.uri
              - name: request.querystring.text
              - name: request.querystring.img
              - name: request.querystring.event
              - name: request.querystring.attrs
              - name: request.querystring.cluster
  metadata-generator:
    handler: metadata-generator/handler.generate
    environment:
    timeout: 10
    events:
      - http:
          path: /metadata/{mintId}
          method: get
          caching:
            enabled: true
            ttlInSeconds: 10
            perKeyInvalidation:
              requireAuthorization: false
            cacheKeyParameters:
              - name: request.path.mintId
              - name: request.querystring.name
              - name: request.querystring.uri
              - name: request.querystring.text
              - name: request.querystring.img
              - name: request.querystring.event
              - name: request.querystring.attrs
              - name: request.querystring.cluster

custom:
  apigwBinary:
    types:
      - "image/png"
  apiGatewayCaching:
    enabled: true
  domains:
    main:
      domainName: api.host.so
    dev:
      domainName: dev-api.host.so
  # customDomain:
  #   domainName: ${self:custom.domains.${opt:stage}.domainName}
  #   certificateName: "*.host.so"
  #   createRoute53Record: true
  #   autoDomain: true

plugins:
  # - serverless-domain-manager
  - serverless-apigw-binary
  - serverless-apigwy-binary
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-api-gateway-caching
  - serverless-plugin-include-dependencies
  - serverless-prune-plugin
